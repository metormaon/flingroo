package examples

import il.ac.technion.cs.flingroo.Terminal
import il.ac.technion.cs.flingroo.Variable
import il.ac.technion.cs.flingroo.BNF

import static examples.JavaBNF.V.*
import static examples.JavaBNF.T.*

class JavaBNF {
    static enum V implements Variable {CompilationUnit, PackageDeclaration, ImportDeclarations, ImportDeclaration, SingleTypeImportDeclaration, TypeImportOnDemandDeclaration, TypeDeclarations, TypeDeclaration, ClassDeclaration, ClassModifiers, ClassModifier, Super, Interfaces, InterfaceTypeList, ClassBody, ClassBodyDeclarations, ClassBodyDeclaration, ClassMemberDeclaration, StaticInitializer, ConstructorDeclaration, ConstructorModifiers, ConstructorModifier, ConstructorDeclarator, FormalParameterList, FormalParameter, Throws, ClassTypeList, ConstructorBody, ExplicitConstructorInvocation, FieldDeclaration, FieldModifiers, FieldModifier, VariableDeclarators, VariableDeclarator, VariableDeclaratorId, VariableInitializer, MethodDeclaration, MethodHeader, ResultType, MethodModifiers, MethodModifier, MethodDeclarator, MethodBody, InterfaceDeclaration, InterfaceModifiers, InterfaceModifier, ExtendsInterfaces, InterfaceBody, InterfaceMemberDeclarations, InterfaceMemberDeclaration, ConstantDeclaration, ConstantModifiers, AbstractMethodDeclaration, AbstractMethodModifiers, AbstractMethodModifier, ArrayInitializer, VariableInitializers, Type, PrimitiveType, NumericType, IntegralType, FloatingPointType, ReferenceType, ClassOrInterfaceType, ClassType, InterfaceType, ArrayType, Block, BlockStatements, BlockStatement, LocalVariableDeclarationStatement, LocalVariableDeclaration, Statement, StatementNoShortIf, StatementWithoutTrailingSubstatement, EmptyStatement, LabeledStatement, LabeledStatementNoShortIf, ExpressionStatement, StatementExpression, IfThenStatement, IfThenElseStatement, IfThenElseStatementNoShortIf, SwitchStatement, SwitchBlock, SwitchBlockStatementGroups, SwitchBlockStatementGroup, SwitchLabels, SwitchLabel, WhileStatement, WhileStatementNoShortIf, DoStatement, ForStatement, ForStatementNoShortIf, ForInit, ForUpdate, StatementExpressionList, BreakStatement, ContinueStatement, ReturnStatement, ThrowsStatement, SynchronizedStatement, TryStatement, Catches, CatchClause, Finally, ConstantExpression, Expression, AssignmentExpression, Assignment, LeftHandSide, AssignmentOperator, ConditionalExpression, ConditionalOrExpression, ConditionalAndExpression, InclusiveOrExpression, ExclusiveOrExpression, AndExpression, EqualityExpression, RelationalExpression, ShiftExpression, AdditiveExpression, MultiplicativeExpression, CastExpression, UnaryExpression, PredecrementExpression, PreincrementExpression, UnaryExpressionNotPlusMinus, PostdecrementExpression, PostincrementExpression, PostfixExpression, MethodInvocation, FieldAccess, Primary, PrimaryNoNewArray, ClassInstanceCreationExpression, ArgumentList, ArrayCreationExpression, DimExprs, DimExpr, Dims, ArrayAccess, PackageName, TypeName, SimpleTypeName, ExpressionName, MethodName, AmbiguousName, Literal, IntegerLiteral, DecimalIntegerLiteral, HexIntegerLiteral, OctalIntegerLiteral, IntegerTypeSuffix, DecimalNumeral, Digits, Digit, NonZeroDigit, HexNumeral, HexDigit, OctalNumeral, OctalDigit, FloatingPointLiteral, ExponentPart, ExponentIndicator, SignedInteger, Sign, FloatTypeSuffix, BooleanLiteral, CharacterLiteral, SingleCharacter, StringLiteral, StringCharacters, StringCharacter, NullLiteral, Keyword, Identifier}
    static enum T implements Terminal {PACKAGE("package"), T0(";"), IMPORT("import"), T1("."), T2("*"), CLASS("class"), PUBLIC("public"), ABSTRACT("abstract"), FINAL("final"), EXTENDS("extends"), IMPLEMENTS("implements"), T3(","), T4("{"), T5("}"), STATIC("static"), PROTECTED("protected"), PRIVATE("private"), T6("("), T7(")"), THROWS("throws"), THIS("this"), SUPER("super"), TRANSIENT("transient"), VOLATILE("volatile"), T8("="), T9("["), T10("]"), VOID("void"), SYNCHRONIZED("synchronized"), NATIVE("native"), INTERFACE("interface"), BOOLEAN("boolean"), BYTE("byte"), SHORT("short"), INT("int"), LONG("long"), CHAR("char"), FLOAT("float"), DOUBLE("double"), T11(":"), IF("if"), ELSE("else"), SWITCH("switch"), CASE("case"), DEFAULT("default"), WHILE("while"), DO("do"), FOR("for"), BREAK("break"), CONTINUE("continue"), RETURN("return"), THROW("throw"), TRY("try"), CATCH("catch"), FINALLY("finally"), T12("*="), T13("/="), T14("%="), T15("+="), T16("-="), T17("<<="), T18(">>="), T19(">>>="), T20("&="), T21("^="), T22("|="), T23("?"), T24("||"), T25("&&"), T26("|"), T27("^"), T28("&"), T29("=="), T30("!="), T31("<"), T32(">"), T33("<="), T34(">="), INSTANCEOF("instanceof"), T35("<<"), T36(">>"), T37(">>>"), T38("+"), T39("-"), T40("/"), T41("%"), T42("--"), T43("++"), T44("~"), T45("!"), NEW("new"), L, T46("0"), T47("1"), T48("2"), T49("3"), T50("4"), T51("5"), T52("6"), T53("7"), T54("8"), T55("9"), X, A("a"), B("b"), C("c"), D("d"), E, F, TRUE("true"), FALSE("false"), T56("'"), EXCEPT("except"), AND("and"), T57("\\"), T58("\""), NULL("null"), CONST("const"), GOTO("goto")
        T() {}
        T(String label) {
            this.label = label
        }
    }

    static void main(String[] args) {
        BNF grammar = BNF.bnf(CompilationUnit) {
            CompilationUnit <- (~PackageDeclaration + ~ImportDeclarations + ~TypeDeclarations)
            PackageDeclaration <- (PACKAGE + PackageName + T0)
            ImportDeclarations <- (ImportDeclaration | ImportDeclarations + ImportDeclaration)
            ImportDeclaration <- (SingleTypeImportDeclaration | TypeImportOnDemandDeclaration)
            SingleTypeImportDeclaration <- (IMPORT + TypeName + T0)
            TypeImportOnDemandDeclaration <- (IMPORT + PackageName + T1 + T2 + T0)
            TypeDeclarations <- (TypeDeclaration | TypeDeclarations + TypeDeclaration)
            TypeDeclaration <- (ClassDeclaration | InterfaceDeclaration | T0)
            ClassDeclaration <- (~ClassModifiers + CLASS + Identifier + ~Super + ~Interfaces + ClassBody)
            ClassModifiers <- (ClassModifier | ClassModifiers + ClassModifier)
            ClassModifier <- (PUBLIC | ABSTRACT | FINAL)
            Super <- (EXTENDS + ClassType)
            Interfaces <- (IMPLEMENTS + InterfaceTypeList)
            InterfaceTypeList <- (InterfaceType | InterfaceTypeList + T3 + InterfaceType)
            ClassBody <- (T4 + ~ClassBodyDeclarations + T5)
            ClassBodyDeclarations <- (ClassBodyDeclaration | ClassBodyDeclarations + ClassBodyDeclaration)
            ClassBodyDeclaration <- (ClassMemberDeclaration | StaticInitializer | ConstructorDeclaration)
            ClassMemberDeclaration <- (FieldDeclaration | MethodDeclaration)
            StaticInitializer <- (STATIC + Block)
            ConstructorDeclaration <- (~ConstructorModifiers + ConstructorDeclarator + ~Throws + ConstructorBody)
            ConstructorModifiers <- (ConstructorModifier | ConstructorModifiers + ConstructorModifier)
            ConstructorModifier <- (PUBLIC | PROTECTED | PRIVATE)
            ConstructorDeclarator <- (SimpleTypeName + T6 + ~FormalParameterList + T7)
            FormalParameterList <- (FormalParameter | FormalParameterList + T3 + FormalParameter)
            FormalParameter <- (Type + VariableDeclaratorId)
            Throws <- (THROWS + ClassTypeList)
            ClassTypeList <- (ClassType | ClassTypeList + T3 + ClassType)
            ConstructorBody <- (T4 + ~ExplicitConstructorInvocation + ~BlockStatements + T5)
            ExplicitConstructorInvocation <- (THIS + T6 + ~ArgumentList + T7 | SUPER + T6 + ~ArgumentList + T7)
            FieldDeclaration <- (~FieldModifiers + Type + VariableDeclarators + T0)
            FieldModifiers <- (FieldModifier | FieldModifiers + FieldModifier)
            FieldModifier <- (PUBLIC | PROTECTED | PRIVATE | STATIC | FINAL | TRANSIENT | VOLATILE)
            VariableDeclarators <- (VariableDeclarator | VariableDeclarators + T3 + VariableDeclarator)
            VariableDeclarator <- (VariableDeclaratorId | VariableDeclaratorId + T8 + VariableInitializer)
            VariableDeclaratorId <- (Identifier | VariableDeclaratorId + T9 + T10)
            VariableInitializer <- (Expression | ArrayInitializer)
            MethodDeclaration <- (MethodHeader + MethodBody)
            MethodHeader <- (~MethodModifiers + ResultType + MethodDeclarator + ~Throws)
            ResultType <- (Type | VOID)
            MethodModifiers <- (MethodModifier | MethodModifiers + MethodModifier)
            MethodModifier <- (PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | FINAL | SYNCHRONIZED | NATIVE)
            MethodDeclarator <- (Identifier + T6 + ~FormalParameterList + T7)
            MethodBody <- (Block | T0)
            InterfaceDeclaration <- (~InterfaceModifiers + INTERFACE + Identifier + ~ExtendsInterfaces + InterfaceBody)
            InterfaceModifiers <- (InterfaceModifier | InterfaceModifiers + InterfaceModifier)
            InterfaceModifier <- (PUBLIC | ABSTRACT)
            ExtendsInterfaces <- (EXTENDS + InterfaceType | ExtendsInterfaces + T3 + InterfaceType)
            InterfaceBody <- (T4 + ~InterfaceMemberDeclarations + T5)
            InterfaceMemberDeclarations <- (InterfaceMemberDeclaration | InterfaceMemberDeclarations + InterfaceMemberDeclaration)
            InterfaceMemberDeclaration <- (ConstantDeclaration | AbstractMethodDeclaration)
            ConstantDeclaration <- (ConstantModifiers + Type + VariableDeclarator)
            ConstantModifiers <- (PUBLIC | STATIC | FINAL)
            AbstractMethodDeclaration <- (~AbstractMethodModifiers + ResultType + MethodDeclarator + ~Throws + T0)
            AbstractMethodModifiers <- (AbstractMethodModifier | AbstractMethodModifiers + AbstractMethodModifier)
            AbstractMethodModifier <- (PUBLIC | ABSTRACT)
            ArrayInitializer <- (T4 + ~VariableInitializers + ~T3 + T5)
            VariableInitializers <- (VariableInitializer | VariableInitializers + T3 + VariableInitializer)
            VariableInitializer <- (Expression | ArrayInitializer)
            Type <- (PrimitiveType | ReferenceType)
            PrimitiveType <- (NumericType | BOOLEAN)
            NumericType <- (IntegralType | FloatingPointType)
            IntegralType <- (BYTE | SHORT | INT | LONG | CHAR)
            FloatingPointType <- (FLOAT | DOUBLE)
            ReferenceType <- (ClassOrInterfaceType | ArrayType)
            ClassOrInterfaceType <- (ClassType | InterfaceType)
            ClassType <- (TypeName)
            InterfaceType <- (TypeName)
            ArrayType <- (Type + T9 + T10)
            Block <- (T4 + ~BlockStatements + T5)
            BlockStatements <- (BlockStatement | BlockStatements + BlockStatement)
            BlockStatement <- (LocalVariableDeclarationStatement | Statement)
            LocalVariableDeclarationStatement <- (LocalVariableDeclaration + T0)
            LocalVariableDeclaration <- (Type + VariableDeclarators)
            Statement <- (StatementWithoutTrailingSubstatement | LabeledStatement | IfThenStatement | IfThenElseStatement | WhileStatement | ForStatement)
            StatementNoShortIf <- (StatementWithoutTrailingSubstatement | LabeledStatementNoShortIf | IfThenElseStatementNoShortIf | WhileStatementNoShortIf | ForStatementNoShortIf)
            StatementWithoutTrailingSubstatement <- (Block | EmptyStatement | ExpressionStatement | SwitchStatement | DoStatement | BreakStatement | ContinueStatement | ReturnStatement | SynchronizedStatement | ThrowsStatements | TryStatement)
            EmptyStatement <- (T0)
            LabeledStatement <- (Identifier + T11 + Statement)
            LabeledStatementNoShortIf <- (Identifier + T11 + StatementNoShortIf)
            ExpressionStatement <- (StatementExpression + T0)
            StatementExpression <- (Assignment | PreincrementExpression | PostincrementExpression | PredecrementExpression | PostdecrementExpression | MethodInvocation | ClassInstanceCreationExpression)
            IfThenStatement <- (IF + T6 + Expression + T7 + Statement)
            IfThenElseStatement <- (IF + T6 + Expression + T7 + StatementNoShortIf + ELSE + Statement)
            IfThenElseStatementNoShortIf <- (IF + T6 + Expression + T7 + StatementNoShortIf + ELSE + StatementNoShortIf)
            SwitchStatement <- (SWITCH + T6 + Expression + T7 + SwitchBlock)
            SwitchBlock <- (T4 + ~SwitchBlockStatementGroups + ~SwitchLabels + T5)
            SwitchBlockStatementGroups <- (SwitchBlockStatementGroup | SwitchBlockStatementGroups + SwitchBlockStatementGroup)
            SwitchBlockStatementGroup <- (SwitchLabels + BlockStatements)
            SwitchLabels <- (SwitchLabel | SwitchLabels + SwitchLabel)
            SwitchLabel <- (CASE + ConstantExpression + T11 | DEFAULT + T11)
            WhileStatement <- (WHILE + T6 + Expression + T7 + Statement)
            WhileStatementNoShortIf <- (WHILE + T6 + Expression + T7 + StatementNoShortIf)
            DoStatement <- (DO + Statement + WHILE + T6 + Expression + T7 + T0)
            ForStatement <- (FOR + T6 + ~ForInit + T0 + ~Expression + T0 + ~ForUpdate + T7 + Statement)
            ForStatementNoShortIf <- (FOR + T6 + ~ForInit + T0 + ~Expression + T0 + ~ForUpdate + T7 + StatementNoShortIf)
            ForInit <- (StatementExpressionList | LocalVariableDeclaration)
            ForUpdate <- (StatementExpressionList)
            StatementExpressionList <- (StatementExpression | StatementExpressionList + T3 + StatementExpression)
            BreakStatement <- (BREAK + ~Identifier + T0)
            ContinueStatement <- (CONTINUE + ~Identifier + T0)
            ReturnStatement <- (RETURN + ~Expression + T0)
            ThrowsStatement <- (THROW + Expression + T0)
            SynchronizedStatement <- (SYNCHRONIZED + T6 + Expression + T7 + Block)
            TryStatement <- (TRY + Block + Catches | TRY + Block + ~Catches + Finally)
            Catches <- (CatchClause | Catches + CatchClause)
            CatchClause <- (CATCH + T6 + FormalParameter + T7 + Block)
            Finally <- (FINALLY + Block)
            ConstantExpression <- (Expression)
            Expression <- (AssignmentExpression)
            AssignmentExpression <- (ConditionalExpression | Assignment)
            Assignment <- (LeftHandSide + AssignmentOperator + AssignmentExpression)
            LeftHandSide <- (ExpressionName | FieldAccess | ArrayAccess)
            AssignmentOperator <- (T8 | T12 | T13 | T14 | T15 | T16 | T17 | T18 | T19 | T20 | T21 | T22)
            ConditionalExpression <- (ConditionalOrExpression | ConditionalOrExpression + T23 + Expression + T11 + ConditionalExpression)
            ConditionalOrExpression <- (ConditionalAndExpression | ConditionalOrExpression + T24 + ConditionalAndExpression)
            ConditionalAndExpression <- (InclusiveOrExpression | ConditionalAndExpression + T25 + InclusiveOrExpression)
            InclusiveOrExpression <- (ExclusiveOrExpression | InclusiveOrExpression + T26 + ExclusiveOrExpression)
            ExclusiveOrExpression <- (AndExpression | ExclusiveOrExpression + T27 + AndExpression)
            AndExpression <- (EqualityExpression | AndExpression + T28 + EqualityExpression)
            EqualityExpression <- (RelationalExpression | EqualityExpression + T29 + RelationalExpression | EqualityExpression + T30 + RelationalExpression)
            RelationalExpression <- (ShiftExpression | RelationalExpression + T31 + ShiftExpression | RelationalExpression + T32 + ShiftExpression | RelationalExpression + T33 + ShiftExpression | RelationalExpression + T34 + ShiftExpression | RelationalExpression + INSTANCEOF + ReferenceType)
            ShiftExpression <- (AdditiveExpression | ShiftExpression + T35 + AdditiveExpression | ShiftExpression + T36 + AdditiveExpression | ShiftExpression + T37 + AdditiveExpression)
            AdditiveExpression <- (MultiplicativeExpression | AdditiveExpression + T38 + MultiplicativeExpression | AdditiveExpression + T39 + MultiplicativeExpression)
            MultiplicativeExpression <- (UnaryExpression | MultiplicativeExpression + T2 + UnaryExpression | MultiplicativeExpression + T40 + UnaryExpression | MultiplicativeExpression + T41 + UnaryExpression)
            CastExpression <- (T6 + PrimitiveType + T7 + UnaryExpression | T6 + ReferenceType + T7 + UnaryExpressionNotPlusMinus)
            UnaryExpression <- (PreincrementExpression | PredecrementExpression | T38 + UnaryExpression | T39 + UnaryExpression | UnaryExpressionNotPlusMinus)
            PredecrementExpression <- (T42 + UnaryExpression)
            PreincrementExpression <- (T43 + UnaryExpression)
            UnaryExpressionNotPlusMinus <- (PostfixExpression | T44 + UnaryExpression | T45 + UnaryExpression | CastExpression)
            PostdecrementExpression <- (PostfixExpression + T42)
            PostincrementExpression <- (PostfixExpression + T43)
            PostfixExpression <- (Primary | ExpressionName | PostincrementExpression | PostdecrementExpression)
            MethodInvocation <- (MethodName + T6 + ~ArgumentList + T7 | Primary + T1 + Identifier + T6 + ~ArgumentList + T7 | SUPER + T1 + Identifier + T6 + ~ArgumentList + T7)
            FieldAccess <- (Primary + T1 + Identifier | SUPER + T1 + Identifier)
            Primary <- (PrimaryNoNewArray | ArrayCreationExpression)
            PrimaryNoNewArray <- (Literal | THIS | T6 + Expression + T7 | ClassInstanceCreationExpression | FieldAccess | MethodInvocation | ArrayAccess)
            ClassInstanceCreationExpression <- (NEW + ClassType + T6 + ~ArgumentList + T7)
            ArgumentList <- (Expression | ArgumentList + T3 + Expression)
            ArrayCreationExpression <- (NEW + PrimitiveType + DimExprs + ~Dims | NEW + ClassOrInterfaceType + DimExprs + ~Dims)
            DimExprs <- (DimExpr | DimExprs + DimExpr)
            DimExpr <- (T9 + Expression + T10)
            Dims <- (T9 + T10 | Dims + T9 + T10)
            ArrayAccess <- (ExpressionName + T9 + Expression + T10 | PrimaryNoNewArray + T9 + Expression + T10)
            PackageName <- (Identifier | PackageName + T1 + Identifier)
            TypeName <- (Identifier | PackageName + T1 + Identifier)
            SimpleTypeName <- (Identifier)
            ExpressionName <- (Identifier | AmbiguousName + T1 + Identifier)
            MethodName <- (Identifier | AmbiguousName + T1 + Identifier)
            AmbiguousName <- (Identifier | AmbiguousName + T1 + Identifier)
            Literal <- (IntegerLiteral | FloatingPointLiteral | BooleanLiteral | CharacterLiteral | StringLiteral | NullLiteral)
            IntegerLiteral <- (DecimalIntegerLiteral | HexIntegerLiteral | OctalIntegerLiteral)
            DecimalIntegerLiteral <- (DecimalNumeral + ~IntegerTypeSuffix)
            HexIntegerLiteral <- (HexNumeral + ~IntegerTypeSuffix)
            OctalIntegerLiteral <- (OctalNumeral + ~IntegerTypeSuffix)
            IntegerTypeSuffix <- (L | L)
            DecimalNumeral <- (T46 | NonZeroDigit + ~Digits)
            Digits <- (Digit | Digits + Digit)
            Digit <- (T46 | NonZeroDigit)
            NonZeroDigit <- (T47 | T48 | T49 | T50 | T51 | T52 | T53 | T54 | T55)
            HexNumeral <- (T46 + X + HexDigit | T46 + X + HexDigit | HexNumeral + HexDigit)
            HexDigit <- (T46 | T47 | T48 | T49 | T50 | T51 | T52 | T53 | T54 | T55 | A | B | C | D | E | F | A | B | C | D | E | F)
            OctalNumeral <- (T46 + OctalDigit | OctalNumeral + OctalDigit)
            OctalDigit <- (T46 | T47 | T48 | T49 | T50 | T51 | T52 | T53)
            FloatingPointLiteral <- (Digits + T1 + ~Digits + ~ExponentPart + ~FloatTypeSuffix | T1 + Digits + ~ExponentPart + ~FloatTypeSuffix | Digits + ExponentPart + ~FloatTypeSuffix | Digits + ~ExponentPart + FloatTypeSuffix)
            ExponentPart <- (ExponentIndicator + SignedInteger)
            ExponentIndicator <- (E | E)
            SignedInteger <- (~Sign + Digits)
            Sign <- (T38 | T39)
            FloatTypeSuffix <- (F | F | D | D)
            BooleanLiteral <- (TRUE | FALSE)
            CharacterLiteral <- (T56 + SingleCharacter + T56 | T56 + EscapeSequence + T56)
            SingleCharacter <- (InputCharacter + EXCEPT + T56 + AND + T57)
            StringLiteral <- (T58 + ~StringCharacters + T58)
            StringCharacters <- (StringCharacter | StringCharacters + StringCharacter)
            StringCharacter <- (InputCharacter + EXCEPT + T58 + AND + T57 | EscapeCharacter)
            NullLiteral <- (NULL)
            Keyword <- (ABSTRACT | BOOLEAN | BREAK | BYTE | CASE | CATCH | CHAR | CLASS | CONST | CONTINUE | DEFAULT | DO | DOUBLE | ELSE | EXTENDS | FINAL | FINALLY | FLOAT | FOR | GOTO | IF | IMPLEMENTS | IMPORT | INSTANCEOF | INT | INTERFACE | LONG | NATIVE | NEW | PACKAGE | PRIVATE | PROTECTED | PUBLIC | RETURN | SHORT | STATIC | SUPER | SWITCH | SYNCHRONIZED | THIS | THROW | THROWS | TRANSIENT | TRY | VOID | VOLATILE | WHILE)
            Identifier <- (A | B | C | D)

        }

        println(grammar)
    }
}
